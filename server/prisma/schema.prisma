generator client {
  provider = "prisma-client-js"
  previewFeatures = ["fullTextSearch", "orderByNulls"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                       Int           @id @default(autoincrement())
  address                  String        @unique
  discordAccessToken       String?
  discordRefreshToken      String?
  discordUserId            String?
  discordUserName          String?
  twitterAccessTokenKey    String?
  twitterAccessTokenSecret String?
  twitterUserId            String?
  twitterUserName          String?
  nonce                    String        @default(uuid())
  active                   Boolean?      @default(true)
  projects                 Project[]
  controllers              Controller[]
  participants             Participant[]
  ProjectReport            Report[]
  email                    String?
  emailVerified            Boolean       @default(false)
  createdAt                DateTime      @default(now())
  updatedAt                DateTime      @default(now()) @updatedAt
  tier                     Tier          @relation(fields: [tierId], references: [id])
  tierId                   Int
  banned                   Boolean       @default(false)
  wallets                  Wallet[]
  paid                     Boolean       @default(false)
  username                 String?       @unique
  collectorFavorites       CollectorFavoritePhase[]
}

model Project {
  id              Int          @id @default(autoincrement())
  name            String       @unique
  slug            String       @unique
  description     Json?
  websiteURL      String?
  twitterURL      String?
  discordURL      String?
  headerColor     String?
  headerURL       String?
  pfpURL          String?
  userId          Int
  user            User         @relation(fields: [userId], references: [id])
  controllers     Controller[]
  phases          Phase[]
  ProjectReport   Report[]
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @default(now()) @updatedAt
  phasesPublished Boolean      @default(true)
}

model Phase {
  id                     Int                           @id @default(autoincrement())
  outerId                Int
  name                   String
  type                   String
  numberOfWinners        Int
  mintsPerWinner         Int?
  minEth                 Float?
  mintPrice              Float?
  registrationStart      DateTime?
  registrationEnd        DateTime?
  discordRoles           Json[]
  discordServerLink      String?
  discordServerName      String?
  discordServerId        String?
  discordServers         DiscordServer[]
  discordServersUseType  COMPOUND_REQUIREMENT_USE_TYPE @default(ANY)
  collectionAddress      String?
  collectionLink         String?
  collectionName         String?
  collections            Collection[]
  collectionsUseType     COMPOUND_REQUIREMENT_USE_TYPE @default(ANY)
  winnersFilePath        String?
  projectId              Int
  project                Project                       @relation(fields: [projectId], references: [id], onDelete: Cascade)
  participants           Participant[]
  twitterFollowings      Json[]
  twitterAccounts        TwitterAccount[]
  twitterAccountsUseType COMPOUND_REQUIREMENT_USE_TYPE @default(ANY)
  createdAt              DateTime                      @default(now())
  updatedAt              DateTime                      @default(now()) @updatedAt
  emailRequired          Boolean                       @default(false)
  tweets                 Tweet[]
  tweetsUseType          COMPOUND_REQUIREMENT_USE_TYPE @default(ANY)
  collectorFavorites     CollectorFavoritePhase[]
}

model Participant {
  phaseId             Int
  userId              Int
  assignedAt          DateTime @default(now())
  cheating            Boolean?
  winner              Boolean? @default(false)
  registrationAddress String?
  phase               Phase    @relation(fields: [phaseId], references: [id], onDelete: Cascade)
  user                User     @relation(fields: [userId], references: [id])
  createdAt           DateTime @default(now())
  updatedAt           DateTime @default(now()) @updatedAt

  @@id([phaseId, userId])
}

model Controller {
  projectId Int
  userId    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id])

  @@id([projectId, userId])
}

model Report {
  id        Int      @id @default(autoincrement())
  message   String?
  projectId Int?
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  project   Project? @relation(fields: [projectId], references: [id], onDelete: SetNull)
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}

model Tier {
  id      Int      @id @default(autoincrement())
  type    String
  blocked String[]
  users   User[]
}

model session {
  sid    String   @id @db.VarChar
  sess   Json     @db.Json
  expire DateTime @db.Timestamp(6)

  @@index([expire], map: "IDX_session_expire")
}

model Collection {
  id                Int    @id @default(autoincrement())
  collectionAddress String
  collectionLink    String
  collectionName    String
  amount            Int    @default(1)
  phaseId           Int
  phase             Phase  @relation(fields: [phaseId], references: [id], onDelete: Cascade)
}

model TwitterAccount {
  id      Int    @id @default(autoincrement())
  account String
  phaseId Int
  phase   Phase  @relation(fields: [phaseId], references: [id], onDelete: Cascade)
}

model Tweet {
  id        Int     @id @default(autoincrement())
  like      Boolean
  retweet   Boolean
  tagAmount Int?
  link      String
  phaseId   Int
  phase     Phase   @relation(fields: [phaseId], references: [id], onDelete: Cascade)
}

model DiscordServer {
  id                  Int                           @id @default(autoincrement())
  discordServerId     String
  discordServerName   String
  discordServerLink   String
  phaseId             Int
  phase               Phase                         @relation(fields: [phaseId], references: [id], onDelete: Cascade)
  discordRoles        DiscordRole[]
  discordRolesUseType COMPOUND_REQUIREMENT_USE_TYPE @default(ANY)
}

model DiscordRole {
  id                   Int           @id @default(autoincrement())
  roleName             String
  roleId               String
  discordServerInnerId Int
  discordServer        DiscordServer @relation(fields: [discordServerInnerId], references: [id], onDelete: Cascade)
}

model Wallet {
  id      Int     @id @default(autoincrement())
  address String  @unique
  label   String?
  userId  Int
  user    User    @relation(fields: [userId], references: [id])
}

model CollectorFavoritePhase {
  userId  Int
  phaseId Int
  phase   Phase @relation(fields: [phaseId], references: [id], onDelete: Cascade )
  user    User     @relation(fields: [userId], references: [id])

  @@id([userId, phaseId])
}

enum COMPOUND_REQUIREMENT_USE_TYPE {
  ANY
  ALL
}
